// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ContentType {
  POEM
  SHORT_STORY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  location      String?
  website       String?
  socialLinks   String?   @default("")
  preferences   String?   @default("")
  privacy       String?   @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  poems         Poem[]
  comments      Comment[]
  likes         Like[]
  following     Follow[]  @relation("Following")
  followers     Follow[]  @relation("Followers")
  workshops     WorkshopMember[]
  drafts        Draft[]
  createdWorkshops Workshop[] @relation("CreatedWorkshops")
  feedback      Feedback[]
  notifications Notification[]
  notificationsFrom Notification[] @relation("NotificationFrom")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Poem {
  id          String    @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  workshopId  String?
  workshop    Workshop? @relation(fields: [workshopId], references: [id])
  tags        Tag[]
  likes       Like[]
  comments    Comment[]
  feedback    Feedback[]
  notifications Notification[]

  @@index([authorId])
  @@index([workshopId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  poemId    String
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([poemId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  poemId    String
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)

  @@unique([userId, poemId])
  @@index([userId])
  @@index([poemId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  poems     Poem[]
  drafts    Draft[]
}

model Follow {
  followerId    String
  followingId   String
  follower      User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following     User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Workshop {
  id          String   @id @default(cuid())
  title       String
  description String
  isPrivate   Boolean  @default(false)
  maxMembers  Int      @default(20)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation("CreatedWorkshops", fields: [creatorId], references: [id])
  members     WorkshopMember[]
  poems       Poem[]
  drafts      Draft[]
  notifications Notification[]

  @@index([creatorId])
}

model WorkshopMember {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  workshopId  String
  workshop    Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  role        String   @default("member")

  @@unique([userId, workshopId])
  @@index([userId])
  @@index([workshopId])
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  poemId    String
  author    User     @relation(fields: [authorId], references: [id])
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([poemId])
}

model Draft {
  id          String    @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  workshopId  String?
  workshop    Workshop? @relation(fields: [workshopId], references: [id])
  tags        Tag[]
  published   Boolean   @default(false)
  publishedAt DateTime?

  @@index([authorId])
  @@index([workshopId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'follow', 'like', 'comment', 'workshop_invite', etc.
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userFrom  User?    @relation("NotificationFrom", fields: [userFromId], references: [id])
  userFromId String?
  poemId    String?
  poem      Poem?    @relation(fields: [poemId], references: [id], onDelete: Cascade)
  workshopId String?
  workshop  Workshop? @relation(fields: [workshopId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userFromId])
  @@index([poemId])
  @@index([workshopId])
}
