// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentType {
  POEM
  SHORT_STORY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  moods         Mood[]
  poems         Poem[]
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  likes         Like[]
  following     Follow[]  @relation("Following")
  followers     Follow[]  @relation("Followers")
  hostedWorkshops Workshop[] @relation("WorkshopHost")
  createdWorkshops Workshop[] @relation("CreatedWorkshops")
  participatedWorkshops Workshop[] @relation("WorkshopParticipants")
  workshopMemberships WorkshopMember[]
  feedback      Feedback[]
  drafts        Draft[]
  notifications Notification[] @relation("NotificationTo")
  notificationsFrom Notification[] @relation("NotificationFrom")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Poem {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  tags        Tag[]
  workshopId  String?
  workshop    Workshop?  @relation(fields: [workshopId], references: [id])
  feedback    Feedback[]
}

model Mood {
  id        String   @id @default(cuid())
  mood      String
  notes     String?
  intensity String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  poemId    String
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  poemId    String
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  poems     Poem[]
  drafts    Draft[]
}

model Follow {
  id            String   @id @default(cuid())
  followerId    String
  followingId   String
  follower      User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following     User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@unique([followerId, followingId])
}

model Workshop {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  host          User     @relation("WorkshopHost", fields: [hostId], references: [id], map: "Workshop_host_fkey")
  hostId        String
  participants  User[]   @relation("WorkshopParticipants")
  creator       User     @relation("CreatedWorkshops", fields: [hostId], references: [id], map: "Workshop_creator_fkey")
  members       WorkshopMember[]
  poems         Poem[]
  drafts        Draft[]
}

model WorkshopMember {
  id          String   @id @default(cuid())
  role        String   @default("participant")
  joinedAt    DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  workshopId  String
  workshop    Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  poemId    String
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
}

model Draft {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  workshopId  String?
  workshop    Workshop? @relation(fields: [workshopId], references: [id])
  tags        Tag[]
}

model Notification {
  id          String   @id @default(cuid())
  type        String
  content     String   @db.Text
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation("NotificationTo", fields: [userId], references: [id], onDelete: Cascade)
  userFromId  String?
  userFrom    User?    @relation("NotificationFrom", fields: [userFromId], references: [id])
}
